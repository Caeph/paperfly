#!/bin/bash
# source ~/.bashrc

PAPERFLYPATH="XXXXX"
VERSION="1.1"
# python interpreter
PYTHON="$PAPERFLYPATH/venv/bin/python3"

DECOMPOSITION="$PAPERFLYPATH/decomposition/decomposition_replicates.py"
ERRORCORRECTION="$PAPERFLYPATH/decomposition/error_correction.py"
SECDECOMPOSITION="$PAPERFLYPATH/decomposition/secondary_decomposition.py"
ASSEMBLER="$PAPERFLYPATH/pseudoassembly/SamplerEulerianEfficient"
EXACTMATCHING="$PAPERFLYPATH/alignment/exact_match/Aligner3"
CLUSTERING_SCRIPT="$PAPERFLYPATH/alignment/profiles/align_blast.py"
PEAKCALLING="$PAPERFLYPATH/peak_calling/probabilistic_peak_calling.py"
REPLICATECALLING="$PAPERFLYPATH/peak_calling/compare_replicate_peaks.py"

print_help () {
  echo "This is PAPerFly, the Partial Assembly-based Peak-Finder, version $VERSION".
  echo "Usage:"
  echo "    paperfly --input_description <path to description TSV file> --input_directory <path to input directory> --k <k-mer size>"
  echo

  echo "Parameters:"
  echo "--input_description: path to a csv file (filename, not whole path) describing treatment vs. control relationships for replicates. First line of this file should be \"fastq\\tcontrol\""
  echo "--input_directory: path to a directory with all input files. Cannot be current directory."
  echo "--k: k-mer length for sliding window probing of the sequencing data. Cannot be a multiple of 4 (BCALM property)."
  echo "--working_dir: path to a working directory. Must not exist, otherwise exception is thrown."
  echo "--minimal_abundance: minimal abundance of a k-mer. Should be lower for higher k-mers. Note that lower abundance numbers lead to higher data complexity and longer runtime.If not specified, it is set as 90th percentile in the (non-unique) k-mer counts. Percentile can
                        be adjusted by the --minimal_abundance_percentile parameter."
  echo "--minimal_abundance_percentile: defined percentile of sufficiently abundant kmers. This calculation is time-consuming, but comes in handy if you don\'t know much about the input data size.
  BCALM also makes a number of temporary files during the calculation. These will be removed afterwards. Default option, 95th percentile."
  echo "--minimal_abundance_mapping: abundance threshold of a low abundance kmer count to be considered a sequencing error. Default: 10."
  echo "--assembly_report_step: number of steps after which time and graph state are reported during pseudoassembly. Default: 250."
  echo "--draw: option to draw the components graphs and graphs of assembled profile enrichments."
  echo "--no_store_low: option to throw away low abundance kmers."
 #  echo "--no_controls: option to omit controls. If this is used, empty <control> columns are expected."
  echo "--miss_percentage: identity percentage for a low abundance kmer to be mapped to assembled profile. Values from 0 to 100, default 90"
}

run_on_replicate () {
  TREATMENT="$1"
  CONTROL="$2"
  REPLICATE="$3"
  WORKING_DIR="$OVERALL_WORKING_DIR"/replicate_"$3"

  echo RUNNING DECOMPOSITION
  $PYTHON "$DECOMPOSITION" --k $K --input_filename $TREATMENT --control_filename $CONTROL --working_dir "$WORKING_DIR" $DRAW $ABU $LOW

  if [ $? -eq 0 ]
  then
    echo DECOMPOSITION DONE
  else
    echo decomposition was unsuccesful, exiting
    exit 1
  fi

  echo ERROR CORRECTION
  $PYTHON "$ERRORCORRECTION" --k $K --raw_components "$WORKING_DIR"/components --corrected_components "$WORKING_DIR"/corrected --replaced "$WORKING_DIR"/replaced.tsv
  if [ $? -eq 0 ]
  then
    echo ERROR CORRECTION DONE
  else
    echo error correction was unsuccesful, exiting
    exit 1
  fi

  echo SECONDARY DECOMPOSITION
  cat "$WORKING_DIR"/corrected/* >"$WORKING_DIR"/corrected_graph.unitigs.fasta
  $PYTHON "$SECDECOMPOSITION" --corrected_graph "$WORKING_DIR"/corrected_graph.unitigs.fasta --corrected_components "$WORKING_DIR"/corrected_decomposed
  if [ $? -eq 0 ]
  then
    echo SECONDARY DECOMPOSITION DONE
  else
    echo secondary decomposition was unsuccesful, exiting
    exit 1
  fi

  echo RUNNING PARTIAL ASSEMBLY
  mono "$ASSEMBLER"/bin/Release/SamplerEulerianEfficient.exe --input_path "$WORKING_DIR"/corrected_decomposed --k $K --output_path "$WORKING_DIR"/assemblies --report_step $REPORT_STEP --single_item false
  if [ $? -eq 0 ]
  then
    echo PARTIAL ASSEMBLY DONE
  else
    echo partial assembly was unsuccesful, exiting
    exit 1
  fi

  echo RUNNING EXACT MATCH MAPPING
  mono "$EXACTMATCHING"/bin/Release/Aligner3.exe "$WORKING_DIR"/assemblies "$WORKING_DIR"/aligned $K
  if [ $? -eq 0 ]
  then
    echo EXACT MATCH MAPPING DONE
  else
    echo exact match mapping was unsuccesful, exiting
    exit 1
  fi

  echo RUNNING ALIGNMENT
  $PYTHON "$CLUSTERING_SCRIPT" --perc_identity $MISS --k $K --working_dir "$WORKING_DIR" --min_abundance_mapping $MIN_ABU_MAPPING
  if [ $? -eq 0 ]
  then
    echo ALIGNMENT DONE
  else
    echo alignment was unsuccesful, exiting
    exit 1
  fi

  echo RUNNING PEAK CALLING
  $PYTHON "$PEAKCALLING" --assembled_path "$WORKING_DIR"/aligned_corrected.csv --working_dir "$WORKING_DIR" --treatment_counts treatment.csv --control_counts control.csv --k $K --threads 8 --output_path "$WORKING_DIR"/called_peaks.fasta --problems_no "$REPLICATES_NO"
  if [ $? -eq 0 ]
  then
    echo PEAK CALLING DONE
  else
    echo peak calling was unsuccesful, exiting
    exit 1
  fi
}

# should fit to the params of the scripts
MISS=90  # miss_percentage
K=""  # k
OVERALL_WORKING_DIR=""  # working_dir
MIN_ABU_MAPPING=10  # minimal_abundance_mapping
REPORT_STEP=250  # assembly_report_step
INPUT=""  # csv file with description, input_description
INPUT_DIR=""  # input_directory
DRAW=""  # draw
ABU=""  # minimal_abundance OR minimal_abundance_percentile
LOW=""  # no_store_low
PARTNERTHR="0.1"
REPLICATES_NO=1

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --help)
      print_help
      exit
      ;;
    --input_description)
      INPUT="$2"
      shift # past argument
      shift # past value
      ;;
    --input_directory)
      INPUT_DIR="$2"
      shift # past argument
      shift # past value
      ;;
    --k)
      K="$2"
      shift # past argument
      shift # past value
      ;;
    --minimal_abundance)
      MINIMAL_ABUNDANCE="$2"
      shift # past argument
      shift # past value
      ;;
    --minimal_abundance_percentile)
      MINIMAL_PERCENTILE="$2"
      shift # past argument
      shift # past value
      ;;
    --working_dir)
      OVERALL_WORKING_DIR="$2"
      shift # past argument
      shift # past value
      ;;
    --draw)
      DRAW="--draw"
      shift # past argument
      ;;
    --no_store_low)
      LOW="--no_store_low"
      shift # past argument
      ;;
    --minimal_abundance_mapping)
      MIN_ABU_MAPPING="$2"
      shift
      shift
      ;;
    --assembly_report_step)
      REPORT_STEP="$2"
      shift
      shift
      ;;
    --miss_percentage)
      MISS="$2"
      shift
      shift
      ;;
    #######################################
    ####   DEFAULT
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
    ####   \DEFAULT
  esac
done

if [ -z "$INPUT" ]
then
	echo no input file given, exiting...
	print_help
	exit 1
fi

if [ -z "$INPUT_DIR" ]
then
	echo no input directory specified
	echo "please put all the inputs specified in $INPUT to a single directory (not the current) and provide the path"
	print_help
	exit 1
fi

# INPUT: <k> parameter must be specified
if [ -z "$K" ]
then
	echo no k given, exiting...
	print_help
	exit 1
fi

if [ -z "$OVERALL_WORKING_DIR" ]
then
	dt=$(date +%d%m%Y_%H%M%S);
	OVERALL_WORKING_DIR=$(echo "output_paperfly_$dt")
fi

# INPUT: if minimal_abundance available, use it, otherwise use percentile.
if ! [ -z "$MINIMAL_ABUNDANCE" ]
then
	ABU=$(echo --minimal_abundance $MINIMAL_ABUNDANCE)
elif ! [ -z "$MINIMAL_PERCENTILE" ]
then
	ABU=$(echo --minimal_abundance_percentile $MINIMAL_PERCENTILE)
else
  ABU="--minimal_abundance_percentile 95"  # use default parameters
fi

echo "Parameter recap:"
echo "--input_description $INPUT"
echo "--input_directory $INPUT_DIR"
echo "--k $K"
echo "$ABU"
echo "--assembly_report_step $REPORT_STEP"
echo "--working_dir $OVERALL_WORKING_DIR"
echo "--miss_percentage $MISS"
echo "--minimal_abundance_mapping $MIN_ABU_MAPPING"
echo "$DRAW"
echo "$LOW"

# run program
i=1  # replicate i
REPLICATES_NO=$(cat $INPUT | sed "s/\t/;/g" | tail +2 | wc -l)
for line in $(cat $INPUT | sed "s/\t/;/g" | tail +2)
do
  treatment=$(echo $line | cut -d';' -f1)
  control=$(echo $line | cut -d';' -f2)

  run_on_replicate "$INPUT_DIR"/"$treatment" "$INPUT_DIR"/"$control" "$i"
  (( i++ ))
done

$PYTHON "$REPLICATECALLING" $PARTNERTHR "$OVERALL_WORKING_DIR/replicated_peaks.fasta" $(ls "$OVERALL_WORKING_DIR"/replicate*/called_peaks.fasta)

echo PAPERFLY RUN FINISHED, PEAKS STORED IN "$OVERALL_WORKING_DIR/replicated_peaks.fasta"
