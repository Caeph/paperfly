#!/bin/bash

PYTHON="venv/bin/python3" # python interpreter

# paths to programs -- set absolute during make
DECOMPOSITION="decomposition/decomposition.py"
ASSEMBLER="pseudoassembly/SamplerEulerianEfficient"
EXACTMATCHING="alignment/exact_match/Aligner3"
CLUSTERING_LEV="alignment/profiles/calculate_profiles.py"
# CLUSTERING_HAM="alignment/profiles/calculate_profiles_hamming.py"
PEAKCALLING="peak_calling/derivation_peaks_profiling.py"

MISS=1
DST_METRIC="levenstein" # or hamming

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --input_fastq)
      FASTQ="$2"
      shift # past argument
      shift # past value
      ;;
    --input_fasta)
      FASTA="$2"
      shift # past argument
      shift # past value
      ;;
    --k)
      K="$2"
      shift # past argument
      shift # past value
      ;;
    --control_file)
      CONTROL="--control_filename $2"
      shift # past argument
      shift # past value
      ;;
    --minimal_abundance)
      MINIMAL_ABUNDANCE="$2"
      shift # past argument
      shift # past value
      ;;
    --minimal_abundance_percentile)
      MINIMAL_PERCENTILE="$2"
      shift # past argument
      shift # past value
      ;;
    --working_directory)
      WORKING_DIR="$2"
      shift # past argument
      shift # past value
      ;;
    --draw)
      DRAW="--draw"
      shift # past argument
      ;;
    --exclude_low)
      LOW="--no_store_low"
      shift # past argument
      ;;

#######################################
#   CLUSTERING PARAMS
    --allowed_misses)
      MISS="$2"
      shift # past argument
      shift # past value
      ;;
#    --distance_metric)
#      DST_METRIC="$2"
#      shift # past argument
#      shift # past value
#      ;;
      
#######################################
#   PEAK CALLING PARAMS
    --window)
      WINDOW="--window $2"
      shift # past argument
      shift # past value
      ;;
    --prominence)
      PROMINENCE="--prominence $2"
      shift # past argument
      shift # past value
      ;;
    --peak_format)
      FORMAT="--weighting $2"
      shift # past argument
      shift # past value
      ;;
    --peak_min_width)
      MINWIDTH="--peak_min_width $2"
      shift # past argument
      shift # past value
      ;;
    --peak_max_width)
      MAXWIDTH="--peak_max_width $2"
      shift # past argument
      shift # past value
      ;;
      
#######################################
#   DEFAULT
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

# INPUT: if fasta available, use it, otherwise use fastq.
if ! [ -z "$FASTA" ]
then 
	INPUT=$(echo --input_fasta $FASTA)
elif ! [ -z "$FASTQ" ]
then
	INPUT=$(echo --input_fastq $FASTQ)
else
	echo no input file given, exiting...
	exit 1
fi

# INPUT: <k> parameter must be specified
if [ -z "$K" ]
then
	echo no k given, exiting...
	exit 1
fi

# INPUT: working_directory ...
if [ -z "$WORKING_DIR" ]
then
	dt=$(date '+%d%m%Y_%H%M%S');
	WORKING_DIR=$(echo output_paperfly_$dt)
fi

# INPUT: if minimal_abundance available, use it, otherwise use percentile.
if ! [ -z "$MINIMAL_ABUNDANCE" ]
then 
	ABU=$(echo --minimal_abundance $MINIMAL_ABUNDANCE)
elif ! [ -z "$MINIMAL_PERCENTILE" ]
then
	ABU=$(echo --minimal_abundance_percentile $MINIMAL_PERCENTILE)
fi

# CLUSTERING:
if [ $DST_METRIC = "levenstein" ]
then
	CLUSTERING_SCRIPT="$CLUSTERING_LEV"
# elif [ $DST_METRIC = "hamming" ]
# then
#	CLUSTERING_SCRIPT="$CLUSTERING_HAM"
# else
#	echo unknown distance metric, exiting
#	exit 1
fi

echo Parameter recapitulation:
echo DECOMPOSITION
echo -e '\t'draw: $DRAW
echo -e '\t'input: $INPUT
echo -e '\t'k: $K
echo -e '\t'min. abundance: $ABU
echo -e '\t'work. dir.: $WORKING_DIR
echo -e '\t'control: $CONTROL
echo -e '\t'store_low: $LOW

echo CLUSTERING
echo -e '\t'allowed_misses: $MISS
echo -e '\t'clustering script: $CLUSTERING_SCRIPT

echo PEAK CALLING
echo -e '\t'rolling window: $WINDOW
echo -e '\t'prominence: $PROMINENCE
echo -e '\t'peak format: $FORMAT
echo -e '\t'min peak width: $MINWIDTH
echo -e '\t'max peak width: $MAXWIDTH

echo RUNNING DECOMPOSITION...
$PYTHON $DECOMPOSITION --k $K $INPUT $ABU $DRAW --working_dir $WORKING_DIR $CONTROL $LOW
if [ $? -eq 0 ]
then
	echo DECOMPOSITION DONE
else
	echo decomposition was unsuccesful, exiting
	exit 1
fi

echo Decomposition cleanup...
rm $WORKING_DIR/*.tmp $WORKING_DIR/*.jf $WORKING_DIR/*.fa $WORKING_DIR/*.counts.csv $WORKING_DIR/*.fasta
echo Done.

echo RUNNING PSEUDOASSEMBLY
mono $ASSEMBLER/bin/Release/SamplerEulerianEfficient.exe --input_path $WORKING_DIR/components --k $K --output_path $WORKING_DIR/assemblies --report_step 100 --single_item false
if [ $? -eq 0 ]
then
	echo PSEUDOASSEMBLY DONE
else
	echo pseudoassembly was unsuccesful, exiting
	exit 1
fi

echo RUNNING EXACT MATCH MAPPING
mono $EXACTMATCHING/bin/Release/Aligner3.exe $WORKING_DIR/assemblies $WORKING_DIR/aligned $K $MISS
if [ $? -eq 0 ]
then
	echo EXACT MATCH MAPPING DONE
else
	echo exact match mapping was unsuccesful, exiting
	exit 1
fi

echo RUNNING CLUSTERING ALIGNMENT
$PYTHON $CLUSTERING_SCRIPT --misses $MISS --input $WORKING_DIR/aligned --k $K
if [ $? -eq 0 ]
then
	echo CLUSTERING ALIGNMENT DONE
else
	echo clustering alignment was unsuccesful, exiting
	exit 1
fi

# if lowly abundant kmers are present, add them to <aligned>
if [ -z "$LOW" ] # if exclude_low switch is off
then
	echo adding lowly abundant k-mers to input for clustering...
	cat $WORKING_DIR/low_abund_kmers.csv >> $WORKING_DIR/aligned
fi


echo RUNNING PEAK CALLING
$PYTHON $PEAKCALLING --k $K --aligned $WORKING_DIR/aligned_profiles --overview $WORKING_DIR/aligned_overview.csv --output_filename $WORKING_DIR/peaks.fasta $WINDOW $PROMINENCE $FORMAT $MINWIDTH $MAXWIDTH $DRAW
if [ $? -eq 0 ]
then
	echo PEAK CALLING DONE
else
	echo peak calling was unsuccesful, exiting
	exit 1
fi
